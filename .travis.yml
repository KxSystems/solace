jobs:
  include:
  - dist: xenial
    os: linux
    env: ARCH="x64"
  - dist: bionic
    os: linux
    env: ARCH="x64"
  - os: windows
    env: ARCH="x64"
  - os: windows
    env: ARCH="x86"
language: c
compiler: gcc
os: linux
dist: xenial

before_install:
  - export FILE_ROOT="kdbsolace"
  - export TESTS="False"
  - export BUILD="True"

  # Run instructions to install the C/C++ requirements (SOLACE_INSTALL_DIR) set in place of PAHO_HOME/HDF5_HOME etc.
  # Files in this case are unzipped into cbuild within travis_setup.sh
  - if [[ $BUILD == "True" ]]; then
      chmod +x travis_setup.sh; 
      ./travis_setup.sh;
      export SOLACE_INSTALL_DIR=$TRAVIS_BUILD_DIR/cbuild;
    else
      echo "No build.";
    fi

  - if [[ $TRAVIS_OS_NAME == "linux" ]]; then
      QLIBDIR=l64; OD=$L64;
    elif [[ $TRAVIS_OS_NAME == "osx" ]]; then
      QLIBDIR=m64; OD=$M64;
    elif [[ $TRAVIS_OS_NAME == "windows" ]]; then
      QLIBDIR=w64; OD=$W64;
    else
      echo "unknown OS ('$TRAVIS_OS_NAME')" >&2; exit 1;
    fi

  - export QLIBDIR
  - mkdir qhome;
  - export QHOME=$(pwd)/qhome;
  - export PATH=$QHOME/$QLIBDIR:$PATH;
  
  # Set up q for testing and execute tests on multiple 
  - if [[ $TESTS == "True" && "x$OD" != "x" && "x$QLIC_KC" != "x" ]]; then
      export LD_LIBRARY_PATH=$SOLACE_INSTALL_DIR/lib:$LD_LIBRARY_PATH;
      export DYLD_LIBRARY_PATH=$SOLACE_INSTALL_DIR/lib:$LD_LIBRARY_PATH;
      export PATH=$SOLACE_INSTALL_DIR/lib:$PATH;
      curl -o ${QHOME}/q.zip -L $OD;
      unzip -d ${QHOME} ${QHOME}/q.zip;
      rm ${QHOME}/q.zip;
      echo -n $QLIC_KC |base64 --decode > ${QHOME}/kc.lic;
    else
      echo No kdb+, no tests;
    fi

  - if [[ $TRAVIS_OS_NAME == "windows" ]]; then
      export FILE_TAIL="zip";
    else
      export FILE_TAIL="tgz";
    fi
  - export FILE_NAME=$FILE_ROOT-$TRAVIS_OS_NAME-$ARCH-$TRAVIS_BRANCH.$FILE_TAIL

  # Make binaries for the library as appropriate
  - mkdir build
  - if [[ $BUILD == "True" && $TRAVIS_OS_NAME == "windows" && $ARCH == "x64" ]]; then
      cd build;
      cmake -G "Visual Studio 15 2017 Win64" --config Release ..;
      cmake --build . --config Release --target install;
      cd ..;
    elif [[ $BUILD == "True" && $TRAVIS_OS_NAME == "windows" && $ARCH == "x86" ]]; then
      cd build;
      cmake "Visual Studio 16 2019" -A Win32 --config Release ..;
      cmake --build . --config Release --target install;
      cd ..;
    elif [[ $BUILD == "True" && ( $TRAVIS_OS_NAME == "linux" || $TRAVIS_OS_NAME == "osx" ) ]]; then
      cd build;
      cmake ..;
      cmake --build . --target install;
      cd ..;
    fi

script:
  - if [[ $TESTS == "True" && "x$OD" != "x" && "x$QLIC_KC" != "x" ]]; then
      curl -fsSL -o test.q https://github.com/KxSystems/hdf5/raw/master/test.q;
      q test.q tests/ -q;
    fi
  - if [[ $TRAVIS_OS_NAME == "windows" && $BUILD == "True" ]]; then
      7z a -tzip -r $FILE_NAME ./build/$FILE_ROOT/*;
    elif [[ $BUILD == "True" && ( $TRAVIS_OS_NAME == "linux" || $TRAVIS_OS_NAME == "osx" ) ]]; then  
      tar  -zcvf $FILE_NAME -C build/$FILE_ROOT .;
    elif [[ $TRAVIS_OS_NAME == "windows" ]]; then
      7z a -tzip $FILE_NAME README.md install.bat install32.bat LICENSE q examples docs;
    elif [[ $TRAVIS_OS_NAME == "linux" || $TRAVIS_OS_NAME == "osx" ]]; then
      tar  -zcvf $FILE_NAME README.md install.sh LICENSE q examples docs;
    fi

deploy:
  provider: releases
  token: "$GITHUB_APIKEY"
  file: "$FILE_NAME"
  on:
    tags: true
    condition: $TRAVIS_OS_NAME = windows || $TRAVIS_OS_NAME = osx || ($TRAVIS_DIST = xenial && $TRAVIS_OS_NAME = linux) 
  skip_cleanup: 'true' #  prevent Travis CI from resetting your working directory and deleting all changes made during the build 
